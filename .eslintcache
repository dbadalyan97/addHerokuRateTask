[{"C:\\Users\\Arman\\Desktop\\rateTask\\src\\components\\data.js":"1","C:\\Users\\Arman\\Desktop\\rateTask\\src\\components\\Calculator.jsx":"2","C:\\Users\\Arman\\Desktop\\rateTask\\src\\App.js":"3","C:\\Users\\Arman\\Desktop\\rateTask\\src\\index.js":"4"},{"size":631,"mtime":1611579657427,"results":"5","hashOfConfig":"6"},{"size":3181,"mtime":1611574513234,"results":"7","hashOfConfig":"6"},{"size":1985,"mtime":1611580264850,"results":"8","hashOfConfig":"6"},{"size":191,"mtime":1611580284670,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"s6tdmw",{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Arman\\Desktop\\rateTask\\src\\components\\data.js",[],"C:\\Users\\Arman\\Desktop\\rateTask\\src\\components\\Calculator.jsx",["18"],"C:\\Users\\Arman\\Desktop\\rateTask\\src\\App.js",[],"C:\\Users\\Arman\\Desktop\\rateTask\\src\\index.js",[],{"ruleId":"19","severity":1,"message":"20","line":33,"column":11,"nodeType":"21","endLine":46,"endColumn":6,"suggestions":"22"},"react-hooks/exhaustive-deps","The 'currencyValue' function makes the dependencies of useEffect Hook (at line 50) change on every render. To fix this, wrap the definition of 'currencyValue' in its own useCallback() Hook.","VariableDeclarator",["23"],{"desc":"24","fix":"25"},"Wrap the definition of 'currencyValue' in its own useCallback() Hook.",{"range":"26","text":"27"},[1026,1591],"useCallback((e, l) => {\r\n        console.log(selectValue, selectCurrencyChange, iWant, firstInput, secondInput)\r\n        if (selectCurrencyChange === iWant) {\r\n            setFirstInput(e || firstInput)\r\n            setSecondInput(e || firstInput)\r\n        } else {\r\n            for (let i = 0; i < data.length; i++) {\r\n                // debugger\r\n                if (data[i].bankName === selectValue) {\r\n                    setSecondInput(firstInput * data[i].currency[selectCurrencyChange][0] / data[i].currency[iWant][1])\r\n                }\r\n            }\r\n        }\r\n    })"]